// Do not edit: This code was generated by flatdata's generator.
pub mod n {

pub mod schema {
pub mod structs {
pub const A: &str = r#"namespace n {
struct A
{
    x : u32 : 16;
    y : u32 : 16;
}
}

"#;
pub const R: &str = r#"namespace n {
struct R
{
    @range( x )
    first_x : u32 : 16;
}
}

"#;}pub mod x {
pub const X: &str = r#"namespace n {
struct A
{
    x : u32 : 16;
    y : u32 : 16;
}
}

namespace n {
archive X
{
    data : vector< .n.A >;
}
}

"#;
pub mod resources {pub const DATA: &str = r#"namespace n {
struct A
{
    x : u32 : 16;
    y : u32 : 16;
}
}

namespace n {
archive X
{
    data : vector< .n.A >;
}
}

"#;}
}
}
#[derive(Clone, Debug)]
pub struct A {}

#[derive(Clone, Copy)]
pub struct ARef<'a> {
    data: *const u8,
    _phantom: std::marker::PhantomData<&'a u8>,
}

impl<'a> flatdata::Struct<'a> for A
{
    const SCHEMA: &'static str = schema::structs::A;
    const SIZE_IN_BYTES: usize = 4;
    const IS_OVERLAPPING_WITH_NEXT : bool = false;

    type Item = ARef<'a>;

    #[inline]
    fn create(data : &'a[u8]) -> Self::Item
    {
        Self::Item{ data : data.as_ptr(), _phantom : std::marker::PhantomData }
    }

    type ItemMut = AMut<'a>;

    #[inline]
    fn create_mut(data: &'a mut[u8]) -> Self::ItemMut
    {
        Self::ItemMut{ data : data.as_mut_ptr(), _phantom : std::marker::PhantomData }
    }
}

impl flatdata::NoOverlap for A {}

impl<'a> ARef<'a> {
    #[inline]
    pub fn x(&self) -> u32 {
        let value = flatdata_read_bytes!(u32, self.data, 0, 16);
        unsafe { std::mem::transmute::<u32, u32>(value) }
    }    #[inline]
    pub fn y(&self) -> u32 {
        let value = flatdata_read_bytes!(u32, self.data, 16, 16);
        unsafe { std::mem::transmute::<u32, u32>(value) }
    }
    #[inline]
    pub fn as_ptr(&self) -> *const u8 {
        self.data
    }
}

impl<'a> std::fmt::Debug for ARef<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.debug_struct("A")
            .field("x", &self.x())
            .field("y", &self.y())
            .finish()
    }
}

impl<'a> std::cmp::PartialEq for ARef<'a> {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.x() == other.x() &&        self.y() == other.y()     }
}

impl<'a> flatdata::Ref for ARef<'a> {}

pub struct AMut<'a> {
    data: *mut u8,
    _phantom: std::marker::PhantomData<&'a u8>,
}

impl<'a> AMut<'a> {
    #[inline]
    pub fn x(&self) -> u32 {
        let value = flatdata_read_bytes!(u32, self.data, 0, 16);
        unsafe { std::mem::transmute::<u32, u32>(value) }
    }

    #[inline]
    pub fn set_x(&mut self, value: u32) {
        let buffer = unsafe {
            std::slice::from_raw_parts_mut(self.data, 4)
        };
        flatdata_write_bytes!(u32; value, buffer, 0, 16)
    }

    #[inline]
    pub fn y(&self) -> u32 {
        let value = flatdata_read_bytes!(u32, self.data, 16, 16);
        unsafe { std::mem::transmute::<u32, u32>(value) }
    }

    #[inline]
    pub fn set_y(&mut self, value: u32) {
        let buffer = unsafe {
            std::slice::from_raw_parts_mut(self.data, 4)
        };
        flatdata_write_bytes!(u32; value, buffer, 16, 16)
    }


    #[inline]
    pub fn fill_from(&mut self, other: &ARef) {
        self.set_x(other.x());
        self.set_y(other.y());
    }

    #[inline]
    pub fn as_ptr(&self) -> *const u8 {
        self.data
    }

    #[inline]
    pub fn as_mut_ptr(&self) -> *mut u8 {
        self.data
    }
}

impl<'a> std::fmt::Debug for AMut<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        ARef { data : self.data, _phantom : std::marker::PhantomData }.fmt( f )
    }
}

impl<'a> flatdata::RefMut for AMut<'a> {}

#[derive(Clone, Debug)]
pub struct R {}

#[derive(Clone, Copy)]
pub struct RRef<'a> {
    data: *const u8,
    _phantom: std::marker::PhantomData<&'a u8>,
}

impl<'a> flatdata::Struct<'a> for R
{
    const SCHEMA: &'static str = schema::structs::R;
    const SIZE_IN_BYTES: usize = 2;
    const IS_OVERLAPPING_WITH_NEXT : bool = true;

    type Item = RRef<'a>;

    #[inline]
    fn create(data : &'a[u8]) -> Self::Item
    {
        Self::Item{ data : data.as_ptr(), _phantom : std::marker::PhantomData }
    }

    type ItemMut = RMut<'a>;

    #[inline]
    fn create_mut(data: &'a mut[u8]) -> Self::ItemMut
    {
        Self::ItemMut{ data : data.as_mut_ptr(), _phantom : std::marker::PhantomData }
    }
}


impl<'a> RRef<'a> {
    #[inline]
    pub fn first_x(&self) -> u32 {
        let value = flatdata_read_bytes!(u32, self.data, 0, 16);
        unsafe { std::mem::transmute::<u32, u32>(value) }
    }#[inline]
    pub fn x(&self) -> std::ops::Range<u32> {
        let start = flatdata_read_bytes!(u32, self.data, 0, 16);
        let end = flatdata_read_bytes!(u32, self.data, 0 + 2 * 8, 16);
        start..end
    }


    #[inline]
    pub fn as_ptr(&self) -> *const u8 {
        self.data
    }
}

impl<'a> std::fmt::Debug for RRef<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.debug_struct("R")
            .field("first_x", &self.first_x())
            .finish()
    }
}

impl<'a> std::cmp::PartialEq for RRef<'a> {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.first_x() == other.first_x()     }
}

impl<'a> flatdata::Ref for RRef<'a> {}

pub struct RMut<'a> {
    data: *mut u8,
    _phantom: std::marker::PhantomData<&'a u8>,
}

impl<'a> RMut<'a> {
    #[inline]
    pub fn first_x(&self) -> u32 {
        let value = flatdata_read_bytes!(u32, self.data, 0, 16);
        unsafe { std::mem::transmute::<u32, u32>(value) }
    }

    #[inline]
    pub fn set_first_x(&mut self, value: u32) {
        let buffer = unsafe {
            std::slice::from_raw_parts_mut(self.data, 2)
        };
        flatdata_write_bytes!(u32; value, buffer, 0, 16)
    }


    #[inline]
    pub fn fill_from(&mut self, other: &RRef) {
        self.set_first_x(other.first_x());
    }

    #[inline]
    pub fn as_ptr(&self) -> *const u8 {
        self.data
    }

    #[inline]
    pub fn as_mut_ptr(&self) -> *mut u8 {
        self.data
    }
}

impl<'a> std::fmt::Debug for RMut<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        RRef { data : self.data, _phantom : std::marker::PhantomData }.fmt( f )
    }
}

impl<'a> flatdata::RefMut for RMut<'a> {}




#[derive(Clone)]
pub struct X {
    _storage: ::std::rc::Rc<dyn flatdata::ResourceStorage>,
    data: flatdata::MemoryDescriptor,
}

impl X {
    fn read_resource(
        storage: &dyn flatdata::ResourceStorage,
        name: &str,
        schema: &str,
    ) -> Result<flatdata::MemoryDescriptor, flatdata::ResourceStorageError>
    {
        storage.read(name, schema).map(|x| flatdata::MemoryDescriptor::new(&x))
    }

    fn signature_name(archive_name: &str) -> String {
        format!("{}.archive", archive_name)
    }

    #[inline]
    pub fn data(&self) -> flatdata::ArrayView<super::n::A>
    {
        flatdata::ArrayView::new(&unsafe {self.data.as_bytes()})
    }

}

impl ::std::fmt::Debug for X {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct("X")
            .field("data", &self.data())
            .finish()
    }
}

impl flatdata::Archive for X {
    const NAME: &'static str = "X";
    const SCHEMA: &'static str = schema::x::X;

    fn open(storage: ::std::rc::Rc<dyn flatdata::ResourceStorage>)
        -> ::std::result::Result<Self, flatdata::ResourceStorageError>
    {
        storage.read(&Self::signature_name(Self::NAME), Self::SCHEMA)?;

        let data = Self::read_resource(&*storage, "data", schema::x::resources::DATA)?;

        Ok(Self {
            _storage: storage,
            data,
        })
    }
}

#[derive(Clone, Debug)]
pub struct XBuilder {
    storage: ::std::rc::Rc<dyn flatdata::ResourceStorage>
}

impl XBuilder {
    #[inline]
    pub fn set_data(&self, vector: &flatdata::ArrayView<super::n::A>) -> ::std::io::Result<()> {
        self.storage.write("data", schema::x::resources::DATA, vector.as_ref())
    }

    #[inline]
    pub fn start_data(&self) -> ::std::io::Result<flatdata::ExternalVector<super::n::A>> {
        flatdata::create_external_vector(&*self.storage, "data", schema::x::resources::DATA)
    }

}

impl flatdata::ArchiveBuilder for XBuilder {
    const NAME: &'static str = "X";
    const SCHEMA: &'static str = schema::x::X;

    fn new(
        storage: ::std::rc::Rc<dyn flatdata::ResourceStorage>,
    ) -> Result<Self, flatdata::ResourceStorageError> {
        flatdata::create_archive::<Self>(&storage)?;
        Ok(Self { storage })
    }
}


}
