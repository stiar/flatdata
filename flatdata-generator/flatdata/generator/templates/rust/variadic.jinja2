{%- macro declaration(archive, resource) %}
{% set name = resource.name | snake_to_upper_camel_case %}
{% set types = resource.referenced_structures | structure_references %}

#[derive(Clone, PartialEq)]
pub enum {{name}}Ref<'a> {
    {% for type in types %}
    {{type.node.name }}(<{{fully_qualified_name(archive, type.node)}} as flatdata::Struct<'a>>::Item),
    {%- endfor %}
}

impl<'a> ::std::fmt::Debug for {{name}}Ref<'a> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match *self {
            {% for type in types %}
            {{name}}Ref::{{type.node.name}}(ref inner) => write!(f, "{:?}", inner),
            {% endfor %}
        }
    }
}

impl<'a> flatdata::VariadicRef for {{name}}Ref<'a> {
    #[inline]
    fn size_in_bytes(&self) -> usize {
        match *self {
            {% for type in types %}
            {{name}}Ref::{{type.node.name}}(_) => <{{fully_qualified_name(archive, type.node)}} as flatdata::Struct<'a>>::SIZE_IN_BYTES,
            {% endfor %}
        }
    }
}

pub struct {{name}}Builder<'a> {
    data: &'a mut Vec<u8>
}

impl<'a> {{name}}Builder<'a> {
    {% for type in types %}
    {% set inner_type = fully_qualified_name(archive, type.node) %}
    #[inline]
    pub fn add_{{ type.node.name | camel_to_snake_case }}<'b>(&'b mut self) -> <{{inner_type}} as flatdata::Struct<'b>>::ItemMut {
        let old_len = self.data.len();
        let increment = 1 + <{{inner_type}} as flatdata::Struct<'b>>::SIZE_IN_BYTES;
        self.data.resize(old_len + increment, 0);
        self.data[old_len - flatdata::PADDING_SIZE] = {{loop.index0}};
        <{{inner_type}} as flatdata::Struct<'b>>::create_mut(
            &mut self.data[1 + old_len - flatdata::PADDING_SIZE..]
        )
    }
    {% endfor %}
}

#[derive(Clone)]
pub struct {{name}} {}

impl<'a> flatdata::VariadicStruct<'a> for {{name}} {
    type Index = {{ fully_qualified_name(archive, resource.index_reference.node) }};

    type Item = {{name}}Ref<'a>;

    #[inline]
    fn create(index: flatdata::TypeIndex, data: &'a [u8]) -> Self::Item
    {
        match index {
            {% for type in types %}
                {{loop.index0}} => {{name}}Ref::{{type.node.name}}(<{{fully_qualified_name(archive, type.node)}} as flatdata::Struct<'a>>::create(data)),
            {% endfor %}
            _ => panic!("invalid type index {} for variadic type {{name}}Ref", index),
        }
    }

    type ItemMut = {{name}}Builder<'a>;

    #[inline]
    fn create_mut(data: &'a mut Vec<u8>) -> Self::ItemMut
    {
        Self::ItemMut { data }
    }
}

{%- endmacro %}
