{% import "rust/index.jinja2" as index %}
{% import "rust/variadic.jinja2" as variadic %}

{%- macro declaration(archive) %}

{# variadic structs #}
{% for r in archive.resources | multivector_resources %}

/// Builtin union type of {% for type in r.referenced_structures | structure_references %}{{ type.node.path }}{%- if not loop.last %}, {% endif %}{% endfor %}.
{{- variadic.declaration(archive, r) }}
{%- endfor %}

{# archive definition #}
{%- set archive_ns = archive.name | camel_to_snake_case %}

define_archive!({{archive.name}}, {{archive.name}}Builder, schema::{{ archive_ns }}::{{ archive.name | camel_to_snake_case | upper }};
    {% for r in archive.resources %}
    {% if [r] | instance_resources %}
    struct({{ r.name }}, {{ r.optional | lower }}, schema::{{ archive_ns }}::resources::{{ r.name | upper }}, set_{{ r.name }}, {{ fully_qualified_name(archive, r.referenced_structures[0].node) }}),
    {% endif %}
    {% if [r] | vector_resources %}
    vector({{ r.name }}, {{ r.optional | lower }}, schema::{{ archive_ns }}::resources::{{ r.name | upper }}, set_{{ r.name }}, start_{{ r.name }}, {{ fully_qualified_name(archive, r.referenced_structures[0].node) }}),
    {% endif %}
    {% if [r] | multivector_resources %}
    multivector({{ r.name }}, {{ r.optional | lower }}, schema::{{ archive_ns }}::resources::{{ r.name | upper }}, start_{{ r.name }}, {{ r.name | snake_to_upper_camel_case }}, {{ r.name }}_index, {{ fully_qualified_name(archive, r.index_reference.node) }}),
    {% endif %}
    {% if [r] | rawdata_resources %}
    raw_data({{ r.name }}, {{ r.optional | lower }}, schema::{{ archive_ns }}::resources::{{ r.name | upper }}, set_{{ r.name }}),
    {% endif %}
    {% if [r] | subarchive_resources %}
    archive({{ r.name }}, {{ r.optional | lower }}, schema::{{ archive_ns }}::resources::{{ r.name | upper }}, {{ fully_qualified_name(archive, r.target.node) }}, {{ fully_qualified_name(archive, r.target.node) }}Builder),
    {% endif %}
    {% endfor %}
);
{% endmacro %}
